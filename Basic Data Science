# %%
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
%matplotlib inline
import sklearn
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
plt.rcParams["figure.figsize"] = [10,5]

import warnings
warnings.simplefilter(action = "ignore", category = FutureWarning)

# %%
# Load Data
df = pd.read_csv('usa data.csv')

# %%
# Data Shape
print("Tain Data:", df.shape)

# %%
# View First 10 Rows
df.head(10)

# %%
df.info()

# %%
# Heatmap
sns.heatmap(df.isnull(), yticklabels = False, cbar = False,cmap = 'tab20c_r')
plt.title('Missing Data: Training Set')
plt.show()

# %%
# Remove Unneccessery Column
df.drop("Address", axis=1, inplace = True)
df.head()

# %%
# Remove rows with missing Data
df.dropna(inplace=True)

# %%
df.head()

# %%
df

# %%
# Data Description
df.describe()

# %%
df.shape

# %%
# Splite Data to be used in the models
# Creat Matrix of Features
x = df.drop('Price', axis = 1)    # Seperate Price Column

# Creat Target Variable
y = df['Price']

# %%
x.shape

# %%
y.shape

# %%
# Use X and Y Split for taining the model
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = .20, random_state = 101)

# %%
x_train.shape
x_train

# %%
y_train.shape
y_train

# %%
x_test.shape
x_test

# %%
y_test.shape
y_test

# %%
# Model Training
# Import Model
from sklearn.linear_model import LinearRegression

#Creat instance of Model
lin_reg = LinearRegression()

# Pass Training data into the Model
lin_reg.fit(x_train, y_train)

# %%
# After Training the Model Now Prediction and Teasting the Model
y_pred = lin_reg.predict(x_test)
print(y_pred.shape)
y_pred

# %%
sns.scatterplot(x=y_test, y=y_pred, color = 'Red', label='Actual Data Points')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='blue', label='Ideal Line')
plt.legend()
plt.show()

# %%
# Combine Actual & Predicted Values Side by Side
results = np.column_stack((y_test, y_pred))

# Print Results

print("Actual Values    \    Predicted Values")
print("----------------------------")
for actual, predicted in results:
      print(f"{actual:14.2f}      \      {predicted:12.2f}")


# %%
residual = actual- y_pred.reshape(-1)
residual

# %%
# Distributon plot for Residual (Difference Between Actual and Prediction Values)

sns.displot(residual, kde=True)

# <Axes: ylabel='Density'>
      

# %%
# Scoring

from sklearn.metrics import mean_squared_error

print("Linear Regression Model")

# Results

print('--'*30)

# mean_squared_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)

rmse = np.sqrt(mse)

# Print Evaluation metrics

print("Mean Squared Error:", mse)
print("Root Mean Squared Error", rmse)


